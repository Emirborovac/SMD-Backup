"""
YouTube scraper module for social media links scraping.
Uses yt-dlp for efficient video extraction with cookie support.
"""

import logging
import os
from datetime import datetime
from typing import List
from yt_dlp import YoutubeDL
import config


def youtube_scraper(driver, account_url: str, cookie_path: str, cutoff_date: str) -> List[str]:
    """
    Scrape YouTube channel for video links within the specified date range.
    
    Args:
        driver: Chrome WebDriver instance (not used for YouTube but kept for consistency)
        account_url: YouTube channel URL to scrape
        cookie_path: Path to youtube.txt file containing cookies
        cutoff_date: Cutoff date in YYYY-MM-DD format (videos older than this are ignored)
        
    Returns:
        List of video URLs
    """
    video_urls = []
    
    def extract_youtube_cookies(cookie_path: str) -> str:
        """Extract YouTube cookies and save them in Netscape format for yt-dlp."""
        youtube_cookies = []
        
        try:
            with open(cookie_path, 'r') as file:
                lines = file.readlines()
            
            for line in lines:
                line = line.strip()
                
                # Skip comments and empty lines
                if line.startswith('#') or not line:
                    continue
                
                # Split the line into fields
                fields = line.split('\t')
                if len(fields) < 7:
                    continue
                
                domain = fields[0]
                
                # Only process YouTube cookies
                if 'youtube.com' not in domain.lower():
                    continue
                
                # Parse the cookie fields
                domain_flag = fields[1].upper() == 'TRUE'
                path = fields[2]
                secure = fields[3].upper() == 'TRUE'
                expiry = fields[4]
                name = fields[5]
                value = fields[6]
                
                # Fix domain format for Netscape compliance
                # Remove leading dot if domain_flag is False
                if not domain_flag and domain.startswith('.'):
                    domain = domain[1:]
                # Add leading dot if domain_flag is True and domain doesn't start with dot
                elif domain_flag and not domain.startswith('.'):
                    domain = '.' + domain
                
                # Convert boolean values to Netscape format
                domain_flag_str = 'TRUE' if domain_flag else 'FALSE'
                secure_str = 'TRUE' if secure else 'FALSE'
                
                # Ensure expiry is a valid number
                try:
                    int(expiry)
                except ValueError:
                    expiry = '0'
                
                # Create properly formatted cookie line
                cookie_line = f"{domain}\t{domain_flag_str}\t{path}\t{secure_str}\t{expiry}\t{name}\t{value}"
                youtube_cookies.append(cookie_line)
            
            if not youtube_cookies:
                logging.warning("No YouTube cookies found in cookie file")
                return None
            
            # Save YouTube cookies to temporary file for yt-dlp
            temp_cookie_file = 'temp_youtube_cookies.txt'
            with open(temp_cookie_file, 'w') as f:
                f.write("# Netscape HTTP Cookie File\n")
                f.write("# This file is generated by yt-dlp. Do not edit.\n\n")
                for cookie in youtube_cookies:
                    f.write(cookie + '\n')
            
            logging.info(f"Extracted {len(youtube_cookies)} YouTube cookies")
            return temp_cookie_file
            
        except Exception as e:
            logging.error(f"Could not process YouTube cookies: {e}")
            return None
    
    try:
        logging.info(f"Processing YouTube channel: {account_url}")
        
        # Extract and prepare cookies for yt-dlp
        temp_cookie_file = extract_youtube_cookies(cookie_path)
        
        # Configure yt-dlp options
        ydl_opts = {
            'quiet': True,
            'extract_flat': False,  # Get metadata including dates
            'force_generic_extractor': False,
            'skip_download': True,
            'writeinfojson': False,
            'no_warnings': True,
        }
        
        # Add cookies if available
        if temp_cookie_file:
            ydl_opts['cookiefile'] = temp_cookie_file
            logging.info("Using cookies for YouTube authentication")
        
        # Parse cutoff date
        cutoff_datetime = None
        if cutoff_date:
            try:
                cutoff_datetime = datetime.strptime(cutoff_date, '%Y-%m-%d')
                logging.info(f"Using cutoff date: {cutoff_date}")
            except ValueError:
                logging.error(f"Invalid date format: {cutoff_date}. Use YYYY-MM-DD format.")
                return video_urls
        
        # Extract video information
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(account_url, download=False)
            
            if 'entries' in info:
                for entry in info['entries']:
                    if entry and 'id' in entry:
                        video_url = f"https://www.youtube.com/watch?v={entry['id']}"
                        title = entry.get('title', 'Unknown Title')
                        
                        # Get upload date
                        upload_date = entry.get('upload_date')
                        if upload_date:
                            try:
                                # Convert YYYYMMDD format to datetime
                                date_obj = datetime.strptime(upload_date, '%Y%m%d')
                                formatted_date = date_obj.strftime('%Y-%m-%d')
                                
                                # Check if video is older than cutoff date
                                if cutoff_datetime and date_obj < cutoff_datetime:
                                    logging.info(f"Reached cutoff date. Stopping at: {formatted_date}")
                                    break
                                
                                video_urls.append(video_url)
                                logging.info(f"Found video: {title} ({formatted_date})")
                                
                            except ValueError:
                                # If date parsing fails, include the video anyway
                                video_urls.append(video_url)
                                logging.warning(f"Could not parse date for video: {title}")
                        else:
                            # If no upload date, include the video anyway
                            video_urls.append(video_url)
                            logging.warning(f"No upload date found for video: {title}")
            
            logging.info(f"Successfully collected {len(video_urls)} video links from YouTube")
            
    except Exception as e:
        logging.error(f"Error processing YouTube channel {account_url}: {e}")
    
    finally:
        # Clean up temporary cookie file
        if 'temp_cookie_file' in locals() and temp_cookie_file and os.path.exists(temp_cookie_file):
            try:
                os.remove(temp_cookie_file)
            except Exception as e:
                logging.warning(f"Could not remove temporary cookie file: {e}")
    
    return video_urls